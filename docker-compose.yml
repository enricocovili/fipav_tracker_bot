services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fipav_tracker_telegram_bot
    environment:
      - API_ID=${API_ID}
      - API_HASH=${API_HASH}
      - BOT_TOKEN=${BOT_TOKEN}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=fipav_tracker_postgres
    depends_on:
      - postgres
    networks:
      - fipav_tracker_net
    restart: unless-stopped

  postgres:
    image: postgres:latest
    container_name: fipav_tracker_postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - fipav_tracker_net
    restart: unless-stopped

  cron:
    image: python:3.13-slim
    container_name: fipav_tracker_cron
    volumes:
      - .:/app
    working_dir: /app
    command: >
      sh -c "apt update && apt install -y cron &&
             echo '0 * * * * cd /app && python3 src/db_updater.py >> /var/log/cron.log 2>&1' > /etc/cron.d/db_updater &&
             chmod 0644 /etc/cron.d/db_updater &&
             crontab /etc/cron.d/db_updater &&
             touch /var/log/cron.log &&
             cron && tail -f /var/log/cron.log"
    depends_on:
      - postgres
    networks:
      - fipav_tracker_net
    restart: unless-stopped

volumes:
  pgdata:
    driver: local

networks:
  fipav_tracker_net:
    driver: bridge